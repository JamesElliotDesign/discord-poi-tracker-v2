"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmbiguousDeleteBanRequest = exports.GameServerQueryError = exports.TokenExpired = exports.RequestForbidden = exports.GrantRequired = exports.CFToolsUnavailable = exports.TimeoutError = exports.UnknownError = exports.DuplicateResourceCreation = exports.RequestLimitExceeded = exports.ServerApiIdRequired = exports.AuthenticationRequired = exports.InvalidCredentials = exports.ResourceNotConfigured = exports.AccountCreationFailed = exports.ResourceNotFound = exports.Banlist = exports.Game = exports.Statistic = exports.isIpAddress = exports.IPAddress = exports.IPAddressType = exports.CFToolsId = exports.BohemiaInteractiveId = exports.SteamId64 = exports.BattlEyeGUID = exports.LoginCredentials = exports.ServerApiId = exports.EnterpriseAuthorization = exports.BearerAuthorization = exports.AuthorizationType = void 0;
var AuthorizationType;
(function (AuthorizationType) {
    AuthorizationType["BEARER"] = "Bearer";
    AuthorizationType["NOOP"] = "NoOp";
})(AuthorizationType = exports.AuthorizationType || (exports.AuthorizationType = {}));
var BearerAuthorization = /** @class */ (function () {
    /**
     * An authorization for use with the CFTools Data API. The authorization consists of a type (currently, only Bearer
     * is supported by CFTools) as well as the value (token) needed to use within the authorization. The token is an
     * opaque string, users of this information are not expected to interpret this token.
     */
    function BearerAuthorization(type, token, created, expiresAt) {
        this.type = type;
        this.token = token;
        this.created = created;
        this.expiresAt = expiresAt;
    }
    BearerAuthorization.prototype.asHeader = function () {
        return {
            Authorization: this.type + ' ' + this.token,
        };
    };
    BearerAuthorization.prototype.throwExpired = function (url) {
        return new TokenExpired(url, {
            type: this.type,
            token: this.token,
            created: this.created,
            expiresAt: this.expiresAt,
        });
    };
    return BearerAuthorization;
}());
exports.BearerAuthorization = BearerAuthorization;
var EnterpriseAuthorization = /** @class */ (function () {
    function EnterpriseAuthorization(enterpriseToken, parent) {
        this.enterpriseToken = enterpriseToken;
        this.parent = parent;
    }
    EnterpriseAuthorization.from = function (token, auth) {
        return new EnterpriseAuthorization(token, auth);
    };
    EnterpriseAuthorization.prototype.asHeader = function () {
        var val = this.parent.asHeader();
        val['X-Enterprise-Access-Token'] = this.enterpriseToken;
        return val;
    };
    EnterpriseAuthorization.prototype.throwExpired = function (url) {
        return this.parent.throwExpired(url);
    };
    return EnterpriseAuthorization;
}());
exports.EnterpriseAuthorization = EnterpriseAuthorization;
/**
 * The CFTools Cloud identifier for a specific server in CFTools Cloud. This ID can be found in the API
 * settings of the server.
 */
var ServerApiId = /** @class */ (function () {
    function ServerApiId(id) {
        this.id = id;
    }
    ServerApiId.of = function (id) {
        return new ServerApiId(id);
    };
    return ServerApiId;
}());
exports.ServerApiId = ServerApiId;
/**
 * API Credentials are necessary for API actions which require access to a specific server (nearly any action).
 * These credentials can be retrieved from the CFTools developer portal. You need to create an application first.
 */
var LoginCredentials = /** @class */ (function () {
    function LoginCredentials(applicationId, secret) {
        this.applicationId = applicationId;
        this.secret = secret;
    }
    LoginCredentials.of = function (applicationId, secret) {
        return new LoginCredentials(applicationId, secret);
    };
    return LoginCredentials;
}());
exports.LoginCredentials = LoginCredentials;
var BattlEyeGUID = /** @class */ (function () {
    function BattlEyeGUID(guid) {
        this.guid = guid;
    }
    Object.defineProperty(BattlEyeGUID.prototype, "id", {
        get: function () {
            return this.guid;
        },
        enumerable: false,
        configurable: true
    });
    BattlEyeGUID.of = function (guid) {
        return new BattlEyeGUID(guid);
    };
    return BattlEyeGUID;
}());
exports.BattlEyeGUID = BattlEyeGUID;
var SteamId64 = /** @class */ (function () {
    function SteamId64(id) {
        this.id = id;
    }
    SteamId64.of = function (id) {
        return new SteamId64(id);
    };
    return SteamId64;
}());
exports.SteamId64 = SteamId64;
var BohemiaInteractiveId = /** @class */ (function () {
    function BohemiaInteractiveId(id) {
        this.id = id;
    }
    BohemiaInteractiveId.of = function (id) {
        return new BohemiaInteractiveId(id);
    };
    return BohemiaInteractiveId;
}());
exports.BohemiaInteractiveId = BohemiaInteractiveId;
var CFToolsId = /** @class */ (function () {
    function CFToolsId(id) {
        this.id = id;
    }
    CFToolsId.of = function (id) {
        return new CFToolsId(id);
    };
    return CFToolsId;
}());
exports.CFToolsId = CFToolsId;
var IPAddressType;
(function (IPAddressType) {
    IPAddressType["v4"] = "v4";
    IPAddressType["v6"] = "v6";
})(IPAddressType = exports.IPAddressType || (exports.IPAddressType = {}));
var IPAddress = /** @class */ (function () {
    function IPAddress(id, type) {
        this.id = id;
        this.type = type;
    }
    IPAddress.ofIpv4 = function (address) {
        return new IPAddress(address, IPAddressType.v4);
    };
    return IPAddress;
}());
exports.IPAddress = IPAddress;
function isIpAddress(o) {
    return 'type' in o;
}
exports.isIpAddress = isIpAddress;
var Statistic;
(function (Statistic) {
    Statistic["KILLS"] = "kills";
    Statistic["DEATHS"] = "deaths";
    Statistic["SUICIDES"] = "suicides";
    Statistic["PLAYTIME"] = "playtime";
    Statistic["LONGEST_KILL"] = "longest_kill";
    Statistic["LONGEST_SHOT"] = "longest_shot";
    Statistic["KILL_DEATH_RATIO"] = "kdratio";
    /**
     * @deprecated Use Statistic.KILL_DEATH_RATIO instead
     */
    Statistic["KILL_DEATH_RATION"] = "kdratio";
})(Statistic = exports.Statistic || (exports.Statistic = {}));
var Game;
(function (Game) {
    Game["DayZ"] = "1";
})(Game = exports.Game || (exports.Game = {}));
var Banlist = /** @class */ (function () {
    function Banlist(id) {
        this.id = id;
    }
    Banlist.of = function (guid) {
        return new Banlist(guid);
    };
    return Banlist;
}());
exports.Banlist = Banlist;
/**
 * Indicates that the requested resource (e.g. a server, a priority queue entry or a player ID) does not exist
 * in the CFTools Cloud database.
 */
var ResourceNotFound = /** @class */ (function (_super) {
    __extends(ResourceNotFound, _super);
    function ResourceNotFound(url) {
        var _this = _super.call(this, 'ResourceNotFound: ' + url) || this;
        Object.setPrototypeOf(_this, ResourceNotFound.prototype);
        return _this;
    }
    return ResourceNotFound;
}(Error));
exports.ResourceNotFound = ResourceNotFound;
/**
 * Indicates that an account could not be created through the Account Creation API using the provided identity token.
 */
var AccountCreationFailed = /** @class */ (function (_super) {
    __extends(AccountCreationFailed, _super);
    function AccountCreationFailed(identityToken, notice) {
        var _this = _super.call(this, 'AccountCreationFailed: ' + identityToken + ' (' + notice + ')') || this;
        Object.setPrototypeOf(_this, AccountCreationFailed.prototype);
        return _this;
    }
    return AccountCreationFailed;
}(Error));
exports.AccountCreationFailed = AccountCreationFailed;
/**
 * Indicates that the requested resource was found, however, the action on it could not be fulfilled as the required
 * bucket (like queuepriority or whitelist) was not configured on this resource. You should only retry this request
 * when you ensured that the respective bucket is now configured for the resource correctly.
 */
var ResourceNotConfigured = /** @class */ (function (_super) {
    __extends(ResourceNotConfigured, _super);
    function ResourceNotConfigured(resource) {
        var _this = _super.call(this, 'ResourceNotConfigured: ' + resource) || this;
        Object.setPrototypeOf(_this, ResourceNotConfigured.prototype);
        return _this;
    }
    return ResourceNotConfigured;
}(Error));
exports.ResourceNotConfigured = ResourceNotConfigured;
/**
 * The client tried to receive an authentication token with the provided API credentials (application ID and secret)
 * but failed with an error that indicates that the provided credentials are invalid or expired.
 */
var InvalidCredentials = /** @class */ (function (_super) {
    __extends(InvalidCredentials, _super);
    function InvalidCredentials() {
        var _this = _super.call(this, 'InvalidCredentials') || this;
        Object.setPrototypeOf(_this, InvalidCredentials.prototype);
        return _this;
    }
    return InvalidCredentials;
}(Error));
exports.InvalidCredentials = InvalidCredentials;
/**
 * Indicates that a method/an endpoint was called which requires authentication. However, the used client instance
 * is not authenticated.
 * @see CFToolsClientBuilder.withCredentials
 */
var AuthenticationRequired = /** @class */ (function (_super) {
    __extends(AuthenticationRequired, _super);
    function AuthenticationRequired() {
        var _this = _super.call(this, 'AuthenticationRequired') || this;
        Object.setPrototypeOf(_this, AuthenticationRequired.prototype);
        return _this;
    }
    return AuthenticationRequired;
}(Error));
exports.AuthenticationRequired = AuthenticationRequired;
/**
 * Indicates that a method/an endpoint was called which requires a server API ID. However, the request to the method
 * did not contain a server API ID and the client did not have a default server API ID set. Re-call the method with either
 * a client which has a default server API ID set or provide on in the request parameter of the method.
 */
var ServerApiIdRequired = /** @class */ (function (_super) {
    __extends(ServerApiIdRequired, _super);
    function ServerApiIdRequired() {
        var _this = _super.call(this, 'ServerApiIdRequired') || this;
        Object.setPrototypeOf(_this, ServerApiIdRequired.prototype);
        return _this;
    }
    return ServerApiIdRequired;
}(Error));
exports.ServerApiIdRequired = ServerApiIdRequired;
/**
 * The request exceeded the rate limit of the requested route. Consult the documentation to find out the limit for the
 * requested resource and try the request again after the rate limit passed.
 */
var RequestLimitExceeded = /** @class */ (function (_super) {
    __extends(RequestLimitExceeded, _super);
    function RequestLimitExceeded(url) {
        var _this = _super.call(this, 'RequestLimitExceeded: ' + url) || this;
        Object.setPrototypeOf(_this, RequestLimitExceeded.prototype);
        return _this;
    }
    return RequestLimitExceeded;
}(Error));
exports.RequestLimitExceeded = RequestLimitExceeded;
/**
 * The request attempted to create the requested resource but failed as the resource already exists.
 *
 * For an SDK method that ensures, that the resource which creation is attempted does not exist before creating it, this
 * usually means the resource was created after the resource was checked for existence or deletion, but before the
 * resource could be created by the SDK.
 */
var DuplicateResourceCreation = /** @class */ (function (_super) {
    __extends(DuplicateResourceCreation, _super);
    function DuplicateResourceCreation(url) {
        var _this = _super.call(this, 'DuplicateResourceCreation: ' + url) || this;
        Object.setPrototypeOf(_this, DuplicateResourceCreation.prototype);
        return _this;
    }
    return DuplicateResourceCreation;
}(Error));
exports.DuplicateResourceCreation = DuplicateResourceCreation;
/**
 * The request was aborted with an internal server error indicating that an unexpected error occurred. You may want to
 * retry the request in order to see if that was a temporary problem, consult the documentation for indicators why
 * this could happen or contact the support.
 */
var UnknownError = /** @class */ (function (_super) {
    __extends(UnknownError, _super);
    function UnknownError(url, requestId) {
        var _this = _super.call(this, 'UnknownError: ' + url + ' (' + requestId + ')') || this;
        _this.requestId = requestId;
        Object.setPrototypeOf(_this, UnknownError.prototype);
        return _this;
    }
    return UnknownError;
}(Error));
exports.UnknownError = UnknownError;
/**
 * The request was aborted as it exceeded the maximum time it is supposed to run. This could be the result of
 * temporary overload of the CFTools service.
 */
var TimeoutError = /** @class */ (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError(url) {
        var _this = _super.call(this, 'TimeoutError: ' + url) || this;
        Object.setPrototypeOf(_this, TimeoutError.prototype);
        return _this;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;
/**
 * The request was aborted by CFTools indicating that the service is currently unavailable. Consult the status page
 * of the service to gather information about the problem. Contact the support if the problem persists.
 */
var CFToolsUnavailable = /** @class */ (function (_super) {
    __extends(CFToolsUnavailable, _super);
    function CFToolsUnavailable(url) {
        var _this = _super.call(this, 'CFToolsUnavailable: ' + url) || this;
        Object.setPrototypeOf(_this, CFToolsUnavailable.prototype);
        return _this;
    }
    return CFToolsUnavailable;
}(Error));
exports.CFToolsUnavailable = CFToolsUnavailable;
/**
 * The request tried to interact with a resource for which the provided application credentials do not have access to.
 * Make sure you grant access to the resource for the application (see the grant flow in the documentation).
 */
var GrantRequired = /** @class */ (function (_super) {
    __extends(GrantRequired, _super);
    function GrantRequired(url) {
        var _this = _super.call(this, 'GrantRequired: ' + url) || this;
        Object.setPrototypeOf(_this, GrantRequired.prototype);
        return _this;
    }
    return GrantRequired;
}(Error));
exports.GrantRequired = GrantRequired;
/**
 * A generic error indicating that a request was rejected because the client is not allowed to either access the requested
 * resource, execute the requested action or alike.
 * More details might be available in the #message property, if the API provided it.
 */
var RequestForbidden = /** @class */ (function (_super) {
    __extends(RequestForbidden, _super);
    function RequestForbidden(message) {
        var _this = _super.call(this, 'RequestForbidden: ' + message) || this;
        _this.message = message;
        Object.setPrototypeOf(_this, RequestForbidden.prototype);
        return _this;
    }
    return RequestForbidden;
}(Error));
exports.RequestForbidden = RequestForbidden;
/**
 * The supplied authentication token in the request is valid but expired and needs to be re-generated.
 *
 * With regard to the SDK, this error should not happen as the token is refreshed before it expires.
 */
var TokenExpired = /** @class */ (function (_super) {
    __extends(TokenExpired, _super);
    function TokenExpired(url, info) {
        var _this = _super.call(this, 'TokenExpired: ' + url) || this;
        _this.info = info;
        Object.setPrototypeOf(_this, TokenExpired.prototype);
        return _this;
    }
    return TokenExpired;
}(Error));
exports.TokenExpired = TokenExpired;
/**
 * CFTools received an error, while fetching information from the upstream server of the requested resource. CFTools
 * needed these information in order to fulfill the request.
 */
var GameServerQueryError = /** @class */ (function (_super) {
    __extends(GameServerQueryError, _super);
    function GameServerQueryError(type) {
        var _this = _super.call(this, "GameServerQueryError: ".concat(type)) || this;
        Object.setPrototypeOf(_this, GameServerQueryError.prototype);
        return _this;
    }
    return GameServerQueryError;
}(Error));
exports.GameServerQueryError = GameServerQueryError;
var AmbiguousDeleteBanRequest = /** @class */ (function (_super) {
    __extends(AmbiguousDeleteBanRequest, _super);
    function AmbiguousDeleteBanRequest() {
        var _this = _super.call(this, 'AmbiguousDeleteBanRequest') || this;
        Object.setPrototypeOf(_this, AmbiguousDeleteBanRequest.prototype);
        return _this;
    }
    return AmbiguousDeleteBanRequest;
}(Error));
exports.AmbiguousDeleteBanRequest = AmbiguousDeleteBanRequest;
