"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CachingCFToolsClient = void 0;
var types_1 = require("../types");
function playerId(id) {
    var playerId;
    if ('playerId' in id) {
        playerId = id.playerId;
    }
    else {
        playerId = id;
    }
    return playerId;
}
var CachingCFToolsClient = /** @class */ (function () {
    function CachingCFToolsClient(cache, config, client, defaultServerApiId) {
        this.cache = cache;
        this.config = config;
        this.client = client;
        this.defaultServerApiId = defaultServerApiId;
    }
    CachingCFToolsClient.prototype.getAppGrants = function () {
        var _this = this;
        var key = 'appGrants';
        return this.cacheOrDefault('appGrants', key, function () { return _this.client.getAppGrants(); });
    };
    CachingCFToolsClient.prototype.getGameServerDetails = function (request) {
        var _this = this;
        var key = "".concat(request.game, ":").concat(request.ip, ":").concat(request.port);
        return this.cacheOrDefault('gameServerDetails', key, function () { return _this.client.getGameServerDetails(request); });
    };
    CachingCFToolsClient.prototype.getServerInfo = function (request) {
        var _this = this;
        var key = "".concat(this.serverApiId(request).id);
        return this.cacheOrDefault('serverInfo', key, function () { return _this.client.getServerInfo(request); });
    };
    CachingCFToolsClient.prototype.listGameSessions = function (request) {
        var _this = this;
        var key = "".concat(this.serverApiId(request).id);
        return this.cacheOrDefault('gameSessions', key, function () { return _this.client.listGameSessions(request); });
    };
    CachingCFToolsClient.prototype.spawnItem = function (request) {
        return this.client.spawnItem(request);
    };
    CachingCFToolsClient.prototype.gameLabsAction = function (request) {
        return this.client.gameLabsAction(request);
    };
    CachingCFToolsClient.prototype.teleport = function (request) {
        return this.client.teleport(request);
    };
    CachingCFToolsClient.prototype.healPlayer = function (request) {
        return this.client.healPlayer(request);
    };
    CachingCFToolsClient.prototype.killPlayer = function (request) {
        return this.client.killPlayer(request);
    };
    CachingCFToolsClient.prototype.getLeaderboard = function (request) {
        var _this = this;
        var key = "".concat(this.serverApiId(request).id, ":").concat(request.statistic, ":").concat(request.order, ":").concat(request.limit);
        return this.cacheOrDefault('leaderboard', key, function () { return _this.client.getLeaderboard(request); });
    };
    CachingCFToolsClient.prototype.getPlayerDetails = function (id) {
        var _this = this;
        var key = "".concat(this.serverApiId(id).id, ":").concat(playerId(id).id);
        return this.cacheOrDefault('playerDetails', key, function () { return _this.client.getPlayerDetails(id); });
    };
    CachingCFToolsClient.prototype.deletePlayerDetails = function (id) {
        return this.client.deletePlayerDetails(id);
    };
    CachingCFToolsClient.prototype.getPriorityQueue = function (id) {
        var _this = this;
        var key = "".concat(this.serverApiId(id).id, ":").concat(playerId(id).id);
        return this.cacheOrDefault('priorityQueue', key, function () { return _this.client.getPriorityQueue(id); });
    };
    CachingCFToolsClient.prototype.putPriorityQueue = function (request) {
        return this.client.putPriorityQueue(request);
    };
    CachingCFToolsClient.prototype.deletePriorityQueue = function (id) {
        return this.client.deletePriorityQueue(id);
    };
    CachingCFToolsClient.prototype.getWhitelist = function (id) {
        var _this = this;
        var key = "".concat(this.serverApiId(id).id, ":").concat(playerId(id).id);
        return this.cacheOrDefault('whitelist', key, function () { return _this.client.getWhitelist(id); });
    };
    CachingCFToolsClient.prototype.putWhitelist = function (request) {
        return this.client.putWhitelist(request);
    };
    CachingCFToolsClient.prototype.deleteWhitelist = function (id) {
        return this.client.deleteWhitelist(id);
    };
    CachingCFToolsClient.prototype.listBans = function (request) {
        var _this = this;
        var _a;
        var key = "".concat(request.list.id, ":").concat((_a = request.playerId) === null || _a === void 0 ? void 0 : _a.id);
        return this.cacheOrDefault('banlist', key, function () { return _this.client.listBans(request); });
    };
    CachingCFToolsClient.prototype.putBan = function (request) {
        return this.client.putBan(request);
    };
    CachingCFToolsClient.prototype.deleteBan = function (request) {
        return this.client.deleteBan(request);
    };
    CachingCFToolsClient.prototype.deleteBans = function (request) {
        return this.client.deleteBans(request);
    };
    CachingCFToolsClient.prototype.resolve = function (id) {
        var _this = this;
        var playerId;
        if ('playerId' in id) {
            playerId = id.playerId;
        }
        else {
            playerId = id;
        }
        return this.cacheOrDefault('resolve', playerId.id, function () { return _this.client.resolve(id); });
    };
    CachingCFToolsClient.prototype.serverApiId = function (r) {
        var server = this.defaultServerApiId;
        if ('serverApiId' in r && r.serverApiId) {
            server = r.serverApiId;
        }
        if (!server) {
            throw new types_1.ServerApiIdRequired();
        }
        return server;
    };
    CachingCFToolsClient.prototype.cacheOrDefault = function (category, key, orElse) {
        return __awaiter(this, void 0, void 0, function () {
            var cacheKey, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheKey = "".concat(category, ":").concat(key);
                        result = this.cache.get(cacheKey);
                        if (result !== undefined) {
                            return [2 /*return*/, result];
                        }
                        return [4 /*yield*/, orElse()];
                    case 1:
                        result = _a.sent();
                        this.cache.set(cacheKey, result, this.config[category]);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return CachingCFToolsClient;
}());
exports.CachingCFToolsClient = CachingCFToolsClient;
