"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GotCFToolsClient = void 0;
var types_1 = require("../../types");
var url_1 = require("url");
var crypto_1 = __importDefault(require("crypto"));
var types_2 = require("./types");
var date_to_string_1 = require("./date-to-string");
var GotCFToolsClient = /** @class */ (function () {
    function GotCFToolsClient(client, serverApiId, auth) {
        this.client = client;
        this.serverApiId = serverApiId;
        if (auth) {
            this.auth = auth;
        }
    }
    GotCFToolsClient.prototype.getAppGrants = function () {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function () {
            var response, _g, _h, _j;
            var _k, _l;
            return __generator(this, function (_m) {
                switch (_m.label) {
                    case 0:
                        this.assertAuthentication();
                        _h = (_g = this.client).get;
                        _j = ['v1/@app/grants'];
                        _k = {};
                        _l = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 1: return [4 /*yield*/, _h.apply(_g, _j.concat([(_k.context = (_l.authorization = _m.sent(),
                                _l),
                                _k)]))];
                    case 2:
                        response = _m.sent();
                        return [2 /*return*/, {
                                banlist: (_c = (_b = (_a = response.tokens) === null || _a === void 0 ? void 0 : _a.banlist) === null || _b === void 0 ? void 0 : _b.map(function (e) { return (__assign(__assign({}, e), { created: new Date(e.created_at), created_at: undefined })); })) !== null && _c !== void 0 ? _c : [],
                                server: (_f = (_e = (_d = response.tokens) === null || _d === void 0 ? void 0 : _d.server) === null || _e === void 0 ? void 0 : _e.map(function (e) { return (__assign(__assign({}, e), { created: new Date(e.created_at), created_at: undefined })); })) !== null && _f !== void 0 ? _f : [],
                            }];
                }
            });
        });
    };
    GotCFToolsClient.prototype.getPlayerDetails = function (playerId, resolveOptions) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        return __awaiter(this, void 0, void 0, function () {
            var id, response, _u, _v, _w, player, identities;
            var _x, _y;
            return __generator(this, function (_z) {
                switch (_z.label) {
                    case 0:
                        this.assertAuthentication();
                        return [4 /*yield*/, this.resolve(playerId, resolveOptions)];
                    case 1:
                        id = _z.sent();
                        _v = (_u = this.client).get;
                        _w = ["v2/server/".concat(this.resolveServerApiId('serverApiId' in playerId ? playerId : undefined).id, "/player")];
                        _x = {
                            searchParams: {
                                cftools_id: id.id,
                            }
                        };
                        _y = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 2: return [4 /*yield*/, _v.apply(_u, _w.concat([(_x.context = (_y.authorization = _z.sent(),
                                _y),
                                _x)]))];
                    case 3:
                        response = _z.sent();
                        player = response[id.id];
                        identities = response.identities;
                        return [2 /*return*/, {
                                names: player.omega.name_history,
                                statistics: {
                                    dayz: {
                                        deaths: {
                                            animals: ((_a = player.game.dayz) === null || _a === void 0 ? void 0 : _a.animal_deaths) || 0,
                                            environment: ((_b = player.game.dayz) === null || _b === void 0 ? void 0 : _b.environment_deaths) || 0,
                                            explosions: ((_c = player.game.dayz) === null || _c === void 0 ? void 0 : _c.explosion_deaths) || 0,
                                            other: ((_d = player.game.dayz) === null || _d === void 0 ? void 0 : _d.deaths) || 0,
                                            infected: ((_e = player.game.dayz) === null || _e === void 0 ? void 0 : _e.infected_deaths) || 0,
                                            suicides: ((_f = player.game.dayz) === null || _f === void 0 ? void 0 : _f.suicides) || 0,
                                        },
                                        hits: ((_g = player.game.dayz) === null || _g === void 0 ? void 0 : _g.hits) || 0,
                                        kills: {
                                            players: ((_j = (_h = player.game.dayz) === null || _h === void 0 ? void 0 : _h.kills) === null || _j === void 0 ? void 0 : _j.players) || 0,
                                            infected: ((_l = (_k = player.game.dayz) === null || _k === void 0 ? void 0 : _k.kills) === null || _l === void 0 ? void 0 : _l.infected) || 0,
                                            animals: ((_o = (_m = player.game.dayz) === null || _m === void 0 ? void 0 : _m.kills) === null || _o === void 0 ? void 0 : _o.animals) || 0,
                                        },
                                        kdratio: ((_p = player.game.dayz) === null || _p === void 0 ? void 0 : _p.kdratio) || 0,
                                        longestKill: ((_q = player.game.dayz) === null || _q === void 0 ? void 0 : _q.longest_kill) || 0,
                                        longestShot: ((_r = player.game.dayz) === null || _r === void 0 ? void 0 : _r.longest_shot) || 0,
                                        zones: (0, types_2.toHitZones)((_s = player.game.dayz) === null || _s === void 0 ? void 0 : _s.zones),
                                        weapons: Object.fromEntries(Object.entries(((_t = player.game.dayz) === null || _t === void 0 ? void 0 : _t.weapons) || {}).map(function (e) {
                                            var w = e[1];
                                            return [e[0], __assign(__assign({}, w), { zones: (0, types_2.toHitZones)(w.zones), longestKill: w.longest_kill, longestShot: w.longest_shot })];
                                        })),
                                    },
                                },
                                playtime: player.omega.playtime,
                                sessions: player.omega.sessions,
                                identities: {
                                    battleye: types_1.BattlEyeGUID.of(identities.battleye.guid),
                                    bohemia: types_1.BohemiaInteractiveId.of(identities.bohemiainteractive.uid),
                                    steam: types_1.SteamId64.of(identities.steam.steam64),
                                    cftools: id
                                }
                            }];
                }
            });
        });
    };
    GotCFToolsClient.prototype.deletePlayerDetails = function (id, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var cftoolsId, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.assertAuthentication();
                        return [4 /*yield*/, this.resolve(id, resolveOptions)];
                    case 1:
                        cftoolsId = _f.sent();
                        _b = (_a = this.client).delete;
                        _c = ["v2/server/".concat(this.resolveServerApiId('serverApiId' in id ? id : undefined).id, "/player")];
                        _d = {
                            searchParams: {
                                cftools_id: cftoolsId.id,
                            }
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 3:
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.getLeaderboard = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var params, response, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.assertAuthentication();
                        params = new url_1.URLSearchParams();
                        params.append('stat', request.statistic);
                        if (request.order === 'ASC') {
                            params.append('order', '-1');
                        }
                        else {
                            params.append('order', '1');
                        }
                        if (request.limit && request.limit > 0 && request.limit <= 100) {
                            params.append('limit', request.limit.toString());
                        }
                        _b = (_a = this.client).get;
                        _c = ["v1/server/".concat(this.resolveServerApiId(request).id, "/leaderboard")];
                        _d = {
                            searchParams: params
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 2:
                        response = _f.sent();
                        return [2 /*return*/, response.leaderboard.map(function (raw) {
                                return {
                                    name: raw.latest_name,
                                    rank: raw.rank,
                                    suicides: raw.suicides || 0,
                                    environmentDeaths: raw.environment_deaths || 0,
                                    kills: raw.kills || 0,
                                    deaths: raw.deaths || 0,
                                    playtime: raw.playtime,
                                    id: types_1.CFToolsId.of(raw.cftools_id),
                                    hits: raw.hits,
                                    killDeathRatio: raw.kdratio,
                                    longestKill: raw.longest_kill,
                                    longestShot: raw.longest_shot,
                                };
                            })];
                }
            });
        });
    };
    GotCFToolsClient.prototype.getPriorityQueue = function (playerId, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var id, response, _a, _b, _c, entry;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.assertAuthentication();
                        return [4 /*yield*/, this.resolve(playerId, resolveOptions)];
                    case 1:
                        id = _f.sent();
                        _b = (_a = this.client).get;
                        _c = ["v1/server/".concat(this.resolveServerApiId('serverApiId' in playerId ? playerId : undefined).id, "/queuepriority")];
                        _d = {
                            searchParams: {
                                cftools_id: id.id,
                            }
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 3:
                        response = _f.sent();
                        entry = response.entries.find(function (e) { return e.user.cftools_id === id.id; });
                        if (!entry) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, {
                                createdBy: types_1.CFToolsId.of(entry.creator.cftools_id),
                                comment: entry.meta.comment,
                                expiration: entry.meta.expiration ? (0, date_to_string_1.asDate)(entry.meta.expiration) : 'Permanent',
                                created: new Date(entry.created_at)
                            }];
                }
            });
        });
    };
    GotCFToolsClient.prototype.putPriorityQueue = function (request, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var id, requestBody, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.assertAuthentication();
                        return [4 /*yield*/, this.resolve(request.id, resolveOptions)];
                    case 1:
                        id = _f.sent();
                        requestBody = {
                            cftools_id: id.id,
                            comment: request.comment,
                        };
                        if (request.expires && request.expires !== 'Permanent') {
                            requestBody.expires_at = request.expires.toISOString();
                        }
                        _b = (_a = this.client).post;
                        _c = ["v1/server/".concat(this.resolveServerApiId(request).id, "/queuepriority")];
                        _d = {
                            body: JSON.stringify(requestBody)
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 3:
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.deletePriorityQueue = function (playerId, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var id, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.assertAuthentication();
                        return [4 /*yield*/, this.resolve(playerId, resolveOptions)];
                    case 1:
                        id = _f.sent();
                        _b = (_a = this.client).delete;
                        _c = ["v1/server/".concat(this.resolveServerApiId('serverApiId' in playerId ? playerId : undefined).id, "/queuepriority")];
                        _d = {
                            searchParams: {
                                cftools_id: id.id
                            }
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 3:
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.getWhitelist = function (playerId, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var id, response, _a, _b, _c, entry;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.assertAuthentication();
                        return [4 /*yield*/, this.resolve(playerId, resolveOptions)];
                    case 1:
                        id = _f.sent();
                        _b = (_a = this.client).get;
                        _c = ["v1/server/".concat(this.resolveServerApiId('serverApiId' in playerId ? playerId : undefined).id, "/whitelist")];
                        _d = {
                            searchParams: {
                                cftools_id: id.id,
                            }
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 3:
                        response = _f.sent();
                        if (response.entries.length === 0) {
                            return [2 /*return*/, null];
                        }
                        entry = response.entries[0];
                        return [2 /*return*/, {
                                createdBy: types_1.CFToolsId.of(entry.creator.cftools_id),
                                comment: entry.meta.comment,
                                expiration: entry.meta.expiration ? (0, date_to_string_1.asDate)(entry.meta.expiration) : 'Permanent',
                                created: new Date(entry.created_at)
                            }];
                }
            });
        });
    };
    GotCFToolsClient.prototype.putWhitelist = function (request, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var id, requestBody, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.assertAuthentication();
                        return [4 /*yield*/, this.resolve(request.id, resolveOptions)];
                    case 1:
                        id = _f.sent();
                        requestBody = {
                            cftools_id: id.id,
                            comment: request.comment,
                        };
                        if (request.expires && request.expires !== 'Permanent') {
                            requestBody.expires_at = request.expires.toISOString();
                        }
                        _b = (_a = this.client).post;
                        _c = ["v1/server/".concat(this.resolveServerApiId(request).id, "/whitelist")];
                        _d = {
                            body: JSON.stringify(requestBody)
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 3:
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.deleteWhitelist = function (playerId, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var id, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.assertAuthentication();
                        return [4 /*yield*/, this.resolve(playerId, resolveOptions)];
                    case 1:
                        id = _f.sent();
                        _b = (_a = this.client).delete;
                        _c = ["v1/server/".concat(this.resolveServerApiId('serverApiId' in playerId ? playerId : undefined).id, "/whitelist")];
                        _d = {
                            searchParams: {
                                cftools_id: id.id
                            }
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 3:
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.getGameServerDetails = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var hash, serverResource, response, _a, _b, _c, server;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        hash = crypto_1.default.createHash('sha1');
                        hash.update(request.game);
                        hash.update(request.ip);
                        hash.update(request.port.toString(10));
                        serverResource = hash.digest('hex');
                        _b = (_a = this.client).get;
                        _c = ["v1/gameserver/".concat(serverResource)];
                        _d = {};
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 2:
                        response = _f.sent();
                        server = response[serverResource];
                        if (server._object.error !== 'GameServerQueryError.NONE') {
                            throw new types_1.GameServerQueryError(server._object.error);
                        }
                        return [2 /*return*/, {
                                name: server.name,
                                version: server.version,
                                status: {
                                    players: {
                                        slots: server.status.slots,
                                        online: server.status.players,
                                        queue: server.status.queue.size,
                                    },
                                },
                                security: {
                                    vac: server.security.vac,
                                    battleye: server.security.battleye,
                                    password: server.security.password,
                                },
                                rating: server.rating,
                                rank: server.rank,
                                online: server.online,
                                map: server.map,
                                mods: server.mods.map(function (m) {
                                    return {
                                        name: m.name,
                                        fileId: m.file_id,
                                    };
                                }),
                                geolocation: {
                                    timezone: server.geolocation.timezone,
                                    country: server.geolocation.country,
                                    continent: server.geolocation.continent,
                                    city: server.geolocation.city,
                                    available: server.geolocation.available,
                                },
                                environment: {
                                    perspectives: {
                                        firstPersonPerspective: server.environment.perspectives['1rd'],
                                        thirdPersonPerspective: server.environment.perspectives['3rd'],
                                    },
                                    timeAcceleration: server.environment.time_acceleration,
                                    time: server.environment.time,
                                },
                                attributes: {
                                    dlc: server.attributes.dlc,
                                    dlcs: server.attributes.dlcs,
                                    official: server.attributes.official,
                                    modded: server.attributes.modded,
                                    hive: server.attributes.hive,
                                    experimental: server.attributes.experimental,
                                    whitelist: server.attributes.whitelist,
                                },
                                host: {
                                    address: server.host.address,
                                    gamePort: server.host.game_port,
                                    queryPort: server.host.query_port,
                                },
                            }];
                }
            });
        });
    };
    GotCFToolsClient.prototype.getServerInfo = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var response, _a, _b, _c, game;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _b = (_a = this.client).get;
                        _c = ["v1/server/".concat(this.resolveServerApiId(request).id, "/info")];
                        _d = {};
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 2:
                        response = _f.sent();
                        if (response.server.gameserver.game === 1) {
                            game = types_1.Game.DayZ;
                        }
                        else {
                            throw new Error('Unsupported game: ' + response.server.gameserver.game);
                        }
                        return [2 /*return*/, {
                                nickname: response.server._object.nickname,
                                game: game,
                                connection: {
                                    usedProtocol: response.server.connection.protcol_used,
                                    peerVersion: response.server.connection.peer_version,
                                },
                                owner: types_1.CFToolsId.of(response.server._object.resource_owner),
                            }];
                }
            });
        });
    };
    GotCFToolsClient.prototype.listGameSessions = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var response, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _b = (_a = this.client).get;
                        _c = ["v1/server/".concat(this.resolveServerApiId(request).id, "/GSM/list")];
                        _d = {};
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 2:
                        response = _f.sent();
                        return [2 /*return*/, response.sessions.map(function (s) {
                                var bans = {
                                    count: s.info.ban_count,
                                };
                                var profile = undefined;
                                if (s.persona && s.persona.profile) {
                                    var avatar = void 0;
                                    if (s.persona.profile.avatar) {
                                        try {
                                            avatar = new URL(s.persona.profile.avatar);
                                        }
                                        catch (e) {
                                            console.warn('Could not parse Avatar URL of profile: ' +
                                                s.persona.profile.avatar + '; CFToolsId: ' + s.cftools_id + '; SteamId: ' + s.gamedata.steam64);
                                        }
                                    }
                                    profile = {
                                        name: s.persona.profile.name,
                                        private: s.persona.profile.private,
                                        avatar: avatar,
                                    };
                                    bans = __assign(__assign({}, bans), { gameBanned: !!s.persona.bans.game, communityBanned: s.persona.bans.community, economyBanned: !!s.persona.bans.economy, vacBanned: !!s.persona.bans.vac });
                                }
                                return {
                                    id: s.id,
                                    bans: bans,
                                    profile: profile,
                                    cftoolsId: types_1.CFToolsId.of(s.cftools_id),
                                    playerName: s.gamedata.player_name,
                                    steamId: types_1.SteamId64.of(s.gamedata.steam64),
                                    live: {
                                        loadTime: s.live.load_time,
                                        ping: s.live.ping ? {
                                            actual: s.live.ping.actual,
                                            trend: s.live.ping.trend,
                                        } : undefined,
                                        position: {
                                            join: s.live.position.join ? {
                                                x: s.live.position.join[0],
                                                y: s.live.position.join[1],
                                                z: s.live.position.join[2],
                                            } : undefined,
                                            latest: s.live.position.latest ? {
                                                x: s.live.position.latest[0],
                                                y: s.live.position.latest[1],
                                                z: s.live.position.latest[2],
                                            } : undefined,
                                            leave: s.live.position.leave ? {
                                                x: s.live.position.leave[0],
                                                y: s.live.position.leave[1],
                                                z: s.live.position.leave[2],
                                            } : undefined,
                                        },
                                        loaded: s.live.loaded,
                                    },
                                };
                            })];
                }
            });
        });
    };
    GotCFToolsClient.prototype.spawnItem = function (request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var body;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        body = {
                            serverApiId: request.serverApiId,
                            actionCode: 'CFCloud_SpawnPlayerItem',
                            actionContext: 'player',
                            referenceKey: request.session.steamId.id,
                            parameters: {
                                item: {
                                    dataType: 'string',
                                    valueString: request.itemClass,
                                },
                                quantity: {
                                    dataType: 'int',
                                    valueInt: request.quantity || 1,
                                },
                                debug: {
                                    dataType: 'boolean',
                                    valueBoolean: (_a = request.debug) !== null && _a !== void 0 ? _a : false,
                                },
                                stacked: {
                                    dataType: 'boolean',
                                    valueBoolean: (_b = request.stacked) !== null && _b !== void 0 ? _b : false,
                                },
                            },
                        };
                        return [4 /*yield*/, this.gameLabsAction(body)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.healPlayer = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            serverApiId: request.serverApiId,
                            actionCode: 'CFCloud_HealPlayer',
                            actionContext: 'player',
                            referenceKey: request.session.steamId.id,
                            parameters: {},
                        };
                        return [4 /*yield*/, this.gameLabsAction(body)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.killPlayer = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            serverApiId: request.serverApiId,
                            actionCode: 'CFCloud_KillPlayer',
                            actionContext: 'player',
                            referenceKey: request.session.steamId.id,
                            parameters: {},
                        };
                        return [4 /*yield*/, this.gameLabsAction(body)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.gameLabsAction = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var body, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        body = {
                            actionCode: request.actionCode,
                            actionContext: request.actionContext,
                            referenceKey: request.referenceKey,
                            parameters: __assign({}, request.parameters),
                        };
                        _b = (_a = this.client).post;
                        _c = ["v1/server/".concat(this.resolveServerApiId(request).id, "/GameLabs/action")];
                        _d = {
                            body: JSON.stringify(body)
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 2:
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.teleport = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            serverApiId: request.serverApiId,
                            actionCode: 'CFCloud_TeleportPlayer',
                            actionContext: 'player',
                            referenceKey: request.session.steamId.id,
                            parameters: {
                                vector: {
                                    dataType: 'vector',
                                    valueVectorX: request.coordinates.x,
                                    valueVectorY: request.coordinates.y,
                                    valueVectorZ: request.coordinates.z,
                                },
                            },
                        };
                        return [4 /*yield*/, this.gameLabsAction(body)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.listBans = function (request, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var playerId, response, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        playerId = request.playerId;
                        if (!!(0, types_1.isIpAddress)(request.playerId)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.resolve(request, resolveOptions)];
                    case 1:
                        playerId = (_f.sent());
                        _f.label = 2;
                    case 2:
                        _b = (_a = this.client).get;
                        _c = ["v1/banlist/".concat(request.list.id, "/bans")];
                        _d = {
                            searchParams: {
                                filter: playerId.id,
                            }
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 3: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 4:
                        response = _f.sent();
                        if (response.entries.length === 0) {
                            return [2 /*return*/, []];
                        }
                        return [2 /*return*/, response.entries.map(function (ban) {
                                return {
                                    id: ban.id,
                                    reason: ban.reason,
                                    expiration: ban.expires_at ? (0, date_to_string_1.asDate)(ban.expires_at) : 'Permanent',
                                    created: (0, date_to_string_1.asDate)(ban.created_at),
                                    status: ban.status,
                                };
                            })];
                }
            });
        });
    };
    GotCFToolsClient.prototype.putBan = function (request, resolveOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBody, id, _a, _b, _c, _d;
            var _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        requestBody = {
                            reason: request.reason,
                        };
                        id = request.playerId;
                        if (!((0, types_1.isIpAddress)(id) && id.type === types_1.IPAddressType.v4)) return [3 /*break*/, 1];
                        requestBody.identifier = id.id;
                        requestBody.format = 'ipv4';
                        return [3 /*break*/, 3];
                    case 1:
                        _a = requestBody;
                        return [4 /*yield*/, this.resolve({ playerId: request.playerId }, resolveOptions)];
                    case 2:
                        _a.identifier = (_g.sent()).id;
                        requestBody.format = 'cftools_id';
                        _g.label = 3;
                    case 3:
                        if (request.expiration && request.expiration !== 'Permanent') {
                            requestBody.expires_at = request.expiration.toISOString();
                        }
                        _c = (_b = this.client).post;
                        _d = ["v1/banlist/".concat(request.list.id, "/bans")];
                        _e = {
                            body: JSON.stringify(requestBody)
                        };
                        _f = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 4: return [4 /*yield*/, _c.apply(_b, _d.concat([(_e.context = (_f.authorization = _g.sent(),
                                _f),
                                _e)]))];
                    case 5:
                        _g.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.deleteBan = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var ban, bans, _a, _b, _c;
            var _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (!request.ban) return [3 /*break*/, 1];
                        ban = request.ban;
                        return [3 /*break*/, 4];
                    case 1:
                        if (!request.playerId) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.listBans({
                                list: request.list,
                                playerId: request.playerId
                            })];
                    case 2:
                        bans = _f.sent();
                        if (bans.length > 1) {
                            throw new types_1.AmbiguousDeleteBanRequest();
                        }
                        ban = bans[0];
                        return [3 /*break*/, 4];
                    case 3: throw Error('At least one identifier is needed, none received.');
                    case 4:
                        if (!ban) {
                            return [2 /*return*/];
                        }
                        _b = (_a = this.client).delete;
                        _c = ["v1/banlist/".concat(request.list.id, "/bans")];
                        _d = {
                            searchParams: {
                                ban_id: ban.id,
                            }
                        };
                        _e = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 5: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.context = (_e.authorization = _f.sent(),
                                _e),
                                _d)]))];
                    case 6:
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.deleteBans = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var bans, _i, bans_1, ban;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listBans(request)];
                    case 1:
                        bans = _a.sent();
                        _i = 0, bans_1 = bans;
                        _a.label = 2;
                    case 2:
                        if (!(_i < bans_1.length)) return [3 /*break*/, 5];
                        ban = bans_1[_i];
                        return [4 /*yield*/, this.deleteBan({
                                list: request.list,
                                ban: ban,
                            })];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    GotCFToolsClient.prototype.resolve = function (id, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var playerId, requestUsesAccountCreation, response, _b, _c, _d;
            var _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if ('playerId' in id) {
                            playerId = id.playerId;
                        }
                        else {
                            playerId = id;
                        }
                        if (playerId instanceof types_1.CFToolsId) {
                            return [2 /*return*/, playerId];
                        }
                        requestUsesAccountCreation = (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.autoCreateAccount) === true
                            && playerId instanceof types_1.SteamId64;
                        _c = (_b = this.client).get;
                        _d = ['v1/users/lookup'];
                        _e = {
                            searchParams: {
                                identifier: playerId.id,
                                create: requestUsesAccountCreation,
                            }
                        };
                        _f = {};
                        return [4 /*yield*/, this.auth.provide(this.client)];
                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([(_e.context = (_f.authorization = _g.sent(),
                                _f),
                                _e)]))];
                    case 2:
                        response = _g.sent();
                        if (requestUsesAccountCreation && response.notice !== 'Account Creation API account created') {
                            throw new types_1.AccountCreationFailed(playerId.id, (_a = response.notice) !== null && _a !== void 0 ? _a : 'Unknown error');
                        }
                        return [2 /*return*/, types_1.CFToolsId.of(response.cftools_id)];
                }
            });
        });
    };
    GotCFToolsClient.prototype.assertAuthentication = function () {
        if (!this.auth) {
            throw new types_1.AuthenticationRequired();
        }
    };
    GotCFToolsClient.prototype.resolveServerApiId = function (request) {
        if (request === null || request === void 0 ? void 0 : request.serverApiId) {
            return request.serverApiId;
        }
        if (this.serverApiId) {
            return this.serverApiId;
        }
        throw new types_1.ServerApiIdRequired();
    };
    return GotCFToolsClient;
}());
exports.GotCFToolsClient = GotCFToolsClient;
