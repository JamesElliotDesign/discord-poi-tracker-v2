import { AppGrants, AuthorizationProvider, Ban, CFToolsClient, CFToolsId, DeleteBanRequest, DeleteBansRequest, DeletePriorityQueueRequest, DeleteWhitelistRequest, GameLabsActionRequest, GameServerItem, GameSession, GenericId, GetGameServerDetailsRequest, GetLeaderboardRequest, GetPlayerDetailsRequest, DeletePlayerDetailsRequest, GetPriorityQueueRequest, GetServerInfoRequest, GetWhitelistRequest, HealPlayerRequest, KillPlayerRequest, LeaderboardItem, ListBansRequest, ListGameSessionsRequest, Player, PriorityQueueItem, PutBanRequest, PutPriorityQueueItemRequest, PutWhitelistItemRequest, ServerApiId, ServerInfo, SpawnItemRequest, TeleportPlayerRequest, WhitelistItem, ResolveRequestOptions } from '../../types';
import { HttpClient } from '../http';
export declare class GotCFToolsClient implements CFToolsClient {
    private client;
    private serverApiId?;
    private readonly auth?;
    constructor(client: HttpClient, serverApiId?: ServerApiId | undefined, auth?: AuthorizationProvider);
    getAppGrants(): Promise<AppGrants>;
    getPlayerDetails(playerId: GetPlayerDetailsRequest | GenericId, resolveOptions?: ResolveRequestOptions): Promise<Player>;
    deletePlayerDetails(id: GenericId | DeletePlayerDetailsRequest, resolveOptions?: ResolveRequestOptions): Promise<void>;
    getLeaderboard(request: GetLeaderboardRequest): Promise<LeaderboardItem[]>;
    getPriorityQueue(playerId: GetPriorityQueueRequest | GenericId, resolveOptions?: ResolveRequestOptions): Promise<PriorityQueueItem | null>;
    putPriorityQueue(request: PutPriorityQueueItemRequest, resolveOptions?: ResolveRequestOptions): Promise<void>;
    deletePriorityQueue(playerId: DeletePriorityQueueRequest | GenericId, resolveOptions?: ResolveRequestOptions): Promise<void>;
    getWhitelist(playerId: GetWhitelistRequest | GenericId, resolveOptions?: ResolveRequestOptions): Promise<WhitelistItem | null>;
    putWhitelist(request: PutWhitelistItemRequest, resolveOptions?: ResolveRequestOptions): Promise<void>;
    deleteWhitelist(playerId: DeleteWhitelistRequest | GenericId, resolveOptions?: ResolveRequestOptions): Promise<void>;
    getGameServerDetails(request: GetGameServerDetailsRequest): Promise<GameServerItem>;
    getServerInfo(request: GetServerInfoRequest): Promise<ServerInfo>;
    listGameSessions(request: ListGameSessionsRequest): Promise<GameSession[]>;
    spawnItem(request: SpawnItemRequest): Promise<void>;
    healPlayer(request: HealPlayerRequest): Promise<void>;
    killPlayer(request: KillPlayerRequest): Promise<void>;
    gameLabsAction(request: GameLabsActionRequest): Promise<void>;
    teleport(request: TeleportPlayerRequest): Promise<void>;
    listBans(request: ListBansRequest, resolveOptions?: ResolveRequestOptions): Promise<Ban[]>;
    putBan(request: PutBanRequest, resolveOptions?: ResolveRequestOptions): Promise<void>;
    deleteBan(request: DeleteBanRequest): Promise<void>;
    deleteBans(request: DeleteBansRequest): Promise<void>;
    resolve(id: GenericId | {
        playerId: GenericId;
    }, requestOptions?: ResolveRequestOptions): Promise<CFToolsId>;
    private assertAuthentication;
    private resolveServerApiId;
}
