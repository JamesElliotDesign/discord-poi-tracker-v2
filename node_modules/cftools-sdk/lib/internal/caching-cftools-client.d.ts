import { AppGrants, Ban, Cache, CacheConfiguration, CFToolsClient, DeleteBanRequest, DeletePriorityQueueRequest, DeleteWhitelistRequest, GameServerItem, GenericId, ListBansRequest, GetGameServerDetailsRequest, GetLeaderboardRequest, GetPlayerDetailsRequest, DeletePlayerDetailsRequest, GetPriorityQueueRequest, GetWhitelistRequest, LeaderboardItem, Player, PriorityQueueItem, PutBanRequest, PutPriorityQueueItemRequest, PutWhitelistItemRequest, ServerApiId, DeleteBansRequest, ServerInfo, GetServerInfoRequest, ListGameSessionsRequest, GameSession, SpawnItemRequest, TeleportPlayerRequest, CFToolsId, GameLabsActionRequest, HealPlayerRequest, KillPlayerRequest } from '../types';
export declare class CachingCFToolsClient implements CFToolsClient {
    private readonly cache;
    private readonly config;
    private readonly client;
    private readonly defaultServerApiId?;
    constructor(cache: Cache, config: CacheConfiguration, client: CFToolsClient, defaultServerApiId?: ServerApiId | undefined);
    getAppGrants(): Promise<AppGrants>;
    getGameServerDetails(request: GetGameServerDetailsRequest): Promise<GameServerItem>;
    getServerInfo(request: GetServerInfoRequest): Promise<ServerInfo>;
    listGameSessions(request: ListGameSessionsRequest): Promise<GameSession[]>;
    spawnItem(request: SpawnItemRequest): Promise<void>;
    gameLabsAction(request: GameLabsActionRequest): Promise<void>;
    teleport(request: TeleportPlayerRequest): Promise<void>;
    healPlayer(request: HealPlayerRequest): Promise<void>;
    killPlayer(request: KillPlayerRequest): Promise<void>;
    getLeaderboard(request: GetLeaderboardRequest): Promise<LeaderboardItem[]>;
    getPlayerDetails(id: GenericId | GetPlayerDetailsRequest): Promise<Player>;
    deletePlayerDetails(id: GenericId | DeletePlayerDetailsRequest): Promise<void>;
    getPriorityQueue(id: GenericId | GetPriorityQueueRequest): Promise<PriorityQueueItem | null>;
    putPriorityQueue(request: PutPriorityQueueItemRequest): Promise<void>;
    deletePriorityQueue(id: GenericId | DeletePriorityQueueRequest): Promise<void>;
    getWhitelist(id: GenericId | GetWhitelistRequest): Promise<PriorityQueueItem | null>;
    putWhitelist(request: PutWhitelistItemRequest): Promise<void>;
    deleteWhitelist(id: GenericId | DeleteWhitelistRequest): Promise<void>;
    listBans(request: ListBansRequest): Promise<Ban[]>;
    putBan(request: PutBanRequest): Promise<void>;
    deleteBan(request: DeleteBanRequest): Promise<void>;
    deleteBans(request: DeleteBansRequest): Promise<void>;
    resolve(id: GenericId | {
        playerId: GenericId;
    }): Promise<CFToolsId>;
    private serverApiId;
    private cacheOrDefault;
}
