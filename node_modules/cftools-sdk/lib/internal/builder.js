"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CFToolsClientBuilder = void 0;
var types_1 = require("../types");
var in_memory_cache_1 = require("./in-memory-cache");
var client_1 = require("./got/client");
var caching_cftools_client_1 = require("./caching-cftools-client");
var http_1 = require("./http");
var auth_1 = require("./auth");
var CFToolsClientBuilder = /** @class */ (function () {
    function CFToolsClientBuilder() {
        var _this = this;
        this.cacheConfig = {
            appGrants: 60,
            leaderboard: 30,
            serverInfo: 30,
            gameSessions: 10,
            gameServerDetails: 10,
            playerDetails: 10,
            priorityQueue: 20,
            whitelist: 20,
            banlist: 10,
            resolve: Number.MAX_SAFE_INTEGER,
        };
        this.clientBuilder = function (auth) { return new http_1.GotHttpClient((0, http_1.httpClient)(_this.enterpriseToken !== undefined), auth); };
    }
    /**
     * Set the default server api ID identifying the CFTools Cloud server instance.
     * This default API ID is not required. Methods will allow to override this default id, otherwise this ID
     * needs to be set in order for the method to succeed.
     *
     * Methods that require authentication are marked in their documentation, that they require an authenticated client.
     */
    CFToolsClientBuilder.prototype.withServerApiId = function (serverApiId) {
        this.serverApiId = types_1.ServerApiId.of(serverApiId);
        return this;
    };
    /**
     * The enterprise API is functionally equal with the data API, however, it looses the rate limits and with that allows
     * much more requests per time unit compared to the general available data API. To use it, you require an enterprise access
     * token.
     *
     * @param token The Enterprise Access Token provided by CFTools
     */
    CFToolsClientBuilder.prototype.withEnterpriseApi = function (token) {
        this.enterpriseToken = token;
        return this;
    };
    /**
     * Sets the API credentials used to authenticate against endpoints that require authentication.
     * Not every endpoint of the CFTools Cloud API requires authentication. Where not needed, the SDK will make
     * unauthenticated requests. Whenever an endpoint requires authentication, these credentials must be set in order
     * for the method to succeed.
     */
    CFToolsClientBuilder.prototype.withCredentials = function (applicationId, secret) {
        this.credentials = types_1.LoginCredentials.of(applicationId, secret);
        return this;
    };
    CFToolsClientBuilder.prototype.withCache = function (cache) {
        this.cache = cache || new in_memory_cache_1.InMemoryCache();
        return this;
    };
    /**
     * Allows to set the HTTP Client library builder. Intended use case is to modify the options that is passed to the
     * built-in client builder, however, this can also be used to use your own preferred HTTP library with the sdk, as
     * long as it adheres to the HttpClientBuilder contract.
     *
     * Example use case enabling debug logging and setting your own User Agent in requests:
     * ```
     * import {CFToolsClientBuilder, httpClient} from 'cftools-sdk';
     *
     * new CFToolsClientBuilder()
     *   .withHttpClient(() => new GotHttpClient(httpClient(false, {userAgent: 'myTool/1.0.0 (https://github.com/username/tool-repo)', enableDebugLogging: true})))
     *   .withServerApiId(process.env.CFTOOLS_SERVER_API_ID)
     *   .withCredentials(process.env.CFTOOLS_APPLICATION_ID, process.env.CFTOOLS_APPLICATION_SECRET)
     *   .build()
     * ```
     * @param clientBuilder
     */
    CFToolsClientBuilder.prototype.withHttpClient = function (clientBuilder) {
        this.clientBuilder = clientBuilder;
        return this;
    };
    /**
     * Specify the configuration of the cached CFTools client. Configuring this makes only sense when
     * the client is configured to use a cache, otherwise this configuration is ignored.
     *
     * You do not need to configure all of the CacheConfiguration options. Omitted options will be auto-
     * completed with the default settings.
     */
    CFToolsClientBuilder.prototype.withCacheConfiguration = function (config) {
        this.cacheConfig = __assign(__assign({}, this.cacheConfig), config);
        return this;
    };
    CFToolsClientBuilder.prototype.build = function () {
        var auth = undefined;
        if (this.credentials && this.enterpriseToken) {
            auth = new auth_1.EnterpriseAuthorizationProvider(this.credentials, this.enterpriseToken);
        }
        else if (this.credentials) {
            auth = new auth_1.CFToolsAuthorizationProvider(this.credentials);
        }
        else {
            auth = new auth_1.NoOpAuthorizationProvider();
        }
        var client = new client_1.GotCFToolsClient(this.clientBuilder(auth), this.serverApiId, auth);
        if (this.cache !== undefined) {
            return new caching_cftools_client_1.CachingCFToolsClient(this.cache, this.cacheConfig, client, this.serverApiId);
        }
        return client;
    };
    return CFToolsClientBuilder;
}());
exports.CFToolsClientBuilder = CFToolsClientBuilder;
