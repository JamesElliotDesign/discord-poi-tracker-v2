"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.httpClient = exports.fromHttpError = exports.GotHttpClient = void 0;
var got_1 = __importDefault(require("got"));
var types_1 = require("../types");
var version_1 = require("./version");
var baseUrl = 'https://data.cftools.cloud';
var enterpriseBaseUrl = 'https://epr-data.cftools.cloud';
var redactHeaders = [
    'x-enterprise-access-token',
    'authorization'
];
var redactPaths = [
    '/v1/auth/register'
];
var GotHttpClient = /** @class */ (function () {
    function GotHttpClient(client, auth) {
        this.client = client;
        this.auth = auth;
    }
    GotHttpClient.prototype.get = function (url, options) {
        var _this = this;
        return this.withErrorHandler(function (context) {
            return {
                context: context || (options === null || options === void 0 ? void 0 : options.context),
                request: _this.client(url, _this.populateContext(options, context)).json()
            };
        });
    };
    GotHttpClient.prototype.delete = function (url, options) {
        var _this = this;
        return this.withErrorHandler(function (context) {
            return {
                context: context || (options === null || options === void 0 ? void 0 : options.context),
                request: _this.client.delete(url, _this.populateContext(options)).json(),
            };
        });
    };
    GotHttpClient.prototype.post = function (url, options) {
        var _this = this;
        return this.withErrorHandler(function (context) {
            return {
                context: context || (options === null || options === void 0 ? void 0 : options.context),
                request: _this.client.post(url, _this.populateContext(options)).json(),
            };
        });
    };
    GotHttpClient.prototype.populateContext = function (options, contextOverride) {
        var context = contextOverride || (options === null || options === void 0 ? void 0 : options.context);
        if (options && (context === null || context === void 0 ? void 0 : context.authorization)) {
            options.headers = __assign(__assign({}, options.headers), context.authorization.asHeader());
        }
        return options ? options : {};
    };
    GotHttpClient.prototype.withErrorHandler = function (requestFn) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var r, error_1, err, authorization, e_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        r = requestFn(undefined);
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 9]);
                        return [4 /*yield*/, r.request];
                    case 2: return [2 /*return*/, _d.sent()];
                    case 3:
                        error_1 = _d.sent();
                        err = fromHttpError(error_1, (_a = r.context) === null || _a === void 0 ? void 0 : _a.authorization);
                        if (!(err instanceof types_1.TokenExpired)) return [3 /*break*/, 8];
                        (_b = this.auth) === null || _b === void 0 ? void 0 : _b.reportExpired();
                        return [4 /*yield*/, ((_c = this.auth) === null || _c === void 0 ? void 0 : _c.provide(this.client))];
                    case 4:
                        authorization = _d.sent();
                        _d.label = 5;
                    case 5:
                        _d.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, requestFn(__assign(__assign({}, r.context), { authorization: authorization })).request];
                    case 6: return [2 /*return*/, _d.sent()];
                    case 7:
                        e_1 = _d.sent();
                        throw fromHttpError(e_1, authorization);
                    case 8: throw err;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    return GotHttpClient;
}());
exports.GotHttpClient = GotHttpClient;
function errorMessage(response) {
    var body = JSON.parse(response.body);
    return 'error' in body ? body.error : '';
}
function fromHttpError(error, auth) {
    var response = error.response;
    if (response.statusCode === 404 && errorMessage(response) === 'invalid-bucket') {
        var parts = error.request.requestUrl.split('/');
        return new types_1.ResourceNotConfigured(parts[parts.length - 1]);
    }
    if (response.statusCode === 404) {
        return new types_1.ResourceNotFound(error.request.requestUrl);
    }
    if (response.statusCode === 429) {
        return new types_1.RequestLimitExceeded(error.request.requestUrl);
    }
    if (response.statusCode === 400 && errorMessage(response) === 'duplicate') {
        return new types_1.DuplicateResourceCreation(error.request.requestUrl);
    }
    if (response.statusCode === 403 && errorMessage(response) === 'no-grant') {
        return new types_1.GrantRequired(error.request.requestUrl);
    }
    if (response.statusCode === 403 && errorMessage(response) === 'expired-token') {
        return auth.throwExpired(error.request.requestUrl);
    }
    if (response.statusCode === 403 && errorMessage(response) === 'expired-token') {
        return auth.throwExpired(error.request.requestUrl);
    }
    if (response.statusCode === 403) {
        return new types_1.RequestForbidden(errorMessage(response));
    }
    if (response.statusCode === 500 && errorMessage(response) === 'unexpected-error') {
        return new types_1.UnknownError(error.request.requestUrl, JSON.parse(response.body).request_id);
    }
    if (response.statusCode === 500 && errorMessage(response) === 'timeout') {
        return new types_1.TimeoutError(error.request.requestUrl);
    }
    if (response.statusCode === 500 && errorMessage(response) === 'system-unavailable') {
        return new types_1.CFToolsUnavailable(error.request.requestUrl);
    }
    return error;
}
exports.fromHttpError = fromHttpError;
function redactedHeaders(h) {
    var r = __assign({}, h);
    for (var _i = 0, redactHeaders_1 = redactHeaders; _i < redactHeaders_1.length; _i++) {
        var header = redactHeaders_1[_i];
        if (header in r) {
            r[header] = '[REDACTED]';
        }
    }
    return r;
}
/**
 * Helper method to create an instance of HttpClient. The return type is Got, the internal HTTP client library used
 * in this SDK.
 * This method is exported for pure development usage, only. Its API is not guaranteed to be stable in any way and may
 * change, even in patch releases.
 * It may or may not exist in future releases, may be renamed, moved, unexported or anything alike. Use with caution and
 * only, if you really know what you do.
 *
 * @unstable
 * @param enterprise
 * @param options
 */
function httpClient(enterprise, options) {
    var hooks = {};
    if (options === null || options === void 0 ? void 0 : options.enableDebugLogging) {
        hooks.beforeError = [function (error) {
                var _a, _b, _c, _d;
                var body = '[DISABLED]';
                if (options.logBody) {
                    var raw = (_a = error.response) === null || _a === void 0 ? void 0 : _a.rawBody.toString();
                    body = raw ? raw : body;
                }
                console.log("RequestError: ".concat((_b = error.request) === null || _b === void 0 ? void 0 : _b.options.method, " ").concat((_c = error.request) === null || _c === void 0 ? void 0 : _c.options.url, " - ").concat((_d = error.response) === null || _d === void 0 ? void 0 : _d.statusCode, " - ").concat(error.code, " - ").concat(body));
                return error;
            }];
        hooks.beforeRequest = [function (op) {
                var body = '[DISABLED]';
                var raw = op.body;
                if (options.logBody && raw) {
                    if (redactPaths.includes(op.url.pathname)) {
                        body = '[REDACTED]';
                    }
                    else if (typeof raw === 'string') {
                        body = raw;
                    }
                    else if ('toString' in raw) {
                        body = raw.toString();
                    }
                    else {
                        body = "[UNSUPPORTED ".concat(typeof body, "]");
                    }
                }
                console.log("Doing: ".concat(op.method, " ").concat(op.url, " - ").concat(JSON.stringify(redactedHeaders(op.headers)), " - ").concat(body));
            }];
        hooks.afterResponse = [function (response, retryWithMergedOptions) {
                var body = '[DISABLED]';
                if (redactPaths.includes(response.request.options.url.pathname) && response.statusCode < 400) {
                    body = '[REDACTED]';
                }
                else if (options.logBody) {
                    body = response.rawBody.toString();
                }
                console.log("Response: ".concat(response.method, " ").concat(response.requestUrl, " - ").concat(response.statusCode, " - ").concat(body));
                return response;
            }];
    }
    var headers = {};
    if (options === null || options === void 0 ? void 0 : options.userAgent) {
        headers['user-agent'] = options.userAgent;
    }
    else {
        headers['user-agent'] = "cftools-sdk/".concat(version_1.VERSION, " (https://github.com/floriansw/cftools-sdk)");
    }
    return got_1.default.extend({
        prefixUrl: enterprise ? enterpriseBaseUrl : baseUrl,
        hooks: hooks,
        headers: headers,
    });
}
exports.httpClient = httpClient;
