import { Authorization, AuthorizationProvider, LoginCredentials } from '../types';
import { Headers } from 'got';
import { HttpClient } from './http';
export declare class CFToolsAuthorizationProvider implements AuthorizationProvider {
    private credentials;
    private token;
    private created;
    private expired;
    constructor(credentials: LoginCredentials);
    provide(client: HttpClient): Promise<Authorization>;
    reportExpired(): void;
    protected fetchTokenHeaders(): Headers;
    private setToken;
    private hasToken;
    private fetchToken;
}
export declare class EnterpriseAuthorizationProvider extends CFToolsAuthorizationProvider {
    private readonly enterpriseToken;
    constructor(credentials: LoginCredentials, enterpriseToken: string);
    provide(client: HttpClient): Promise<Authorization>;
    protected fetchTokenHeaders(): Headers;
}
export declare class NoOpAuthorizationProvider implements AuthorizationProvider {
    provide(): Promise<Authorization>;
    reportExpired(): void;
}
