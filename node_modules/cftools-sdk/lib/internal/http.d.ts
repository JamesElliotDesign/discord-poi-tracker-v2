import { Got, HTTPError } from 'got';
import { Authorization, AuthorizationProvider } from '../types';
import { OptionsOfTextResponseBody } from 'got/dist/source/types';
export interface HttpClient {
    get<T>(url: string, options?: OptionsOfTextResponseBody): Promise<T>;
    post<T>(url: string, options?: OptionsOfTextResponseBody): Promise<T>;
    delete<T>(url: string, options?: OptionsOfTextResponseBody): Promise<T>;
}
interface RequestWithContext<T> {
    request: Promise<T>;
    context?: Record<string, unknown>;
}
export declare class GotHttpClient implements HttpClient {
    private readonly client;
    readonly auth?: AuthorizationProvider | undefined;
    constructor(client: Got, auth?: AuthorizationProvider | undefined);
    get<T>(url: string, options?: OptionsOfTextResponseBody): Promise<T>;
    delete<T>(url: string, options?: OptionsOfTextResponseBody): Promise<T>;
    post<T>(url: string, options?: OptionsOfTextResponseBody): Promise<T>;
    protected populateContext(options?: OptionsOfTextResponseBody, contextOverride?: Record<string, unknown>): OptionsOfTextResponseBody;
    protected withErrorHandler<T>(requestFn: (newContext?: Record<string, unknown>) => RequestWithContext<T>): Promise<T>;
}
export declare function fromHttpError(error: HTTPError, auth?: Authorization): Error | HTTPError;
export interface HttpClientOptions {
    enableDebugLogging?: boolean;
    logBody?: boolean;
    userAgent?: string;
}
/**
 * Helper method to create an instance of HttpClient. The return type is Got, the internal HTTP client library used
 * in this SDK.
 * This method is exported for pure development usage, only. Its API is not guaranteed to be stable in any way and may
 * change, even in patch releases.
 * It may or may not exist in future releases, may be renamed, moved, unexported or anything alike. Use with caution and
 * only, if you really know what you do.
 *
 * @unstable
 * @param enterprise
 * @param options
 */
export declare function httpClient(enterprise: boolean, options?: HttpClientOptions): Got;
export {};
